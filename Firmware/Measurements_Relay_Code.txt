/**
 * @file main.cpp
 * @brief MQTT-controlled sensor monitoring and relay control using ESP32.
 * 
 * This program reads data from DHT11 (temperature and humidity), LDR (luminosity),
 * and PZEM004Tv30 (voltage, current, power, energy, frequency, power factor) sensors,
 * publishes sensor readings via MQTT, and controls a relay based on MQTT commands.
 * 
 * Hardware used: ESP32, DHT11, LDR, PZEM004Tv30, relay.
 * Libraries used: PZEM004Tv30, DHT11, WiFi, PubSubClient.
 */

#include <PZEM004Tv30.h>    // Library for PZEM004Tv30 sensor
#include <DHT11.h>          // Library for DHT11 sensor
#include <WiFi.h>           // WiFi library
#include <PubSubClient.h>   // MQTT library

#define LDRPIN 1            ///< Pin for the LDR sensor
#define DHTPIN 5            ///< Pin for the DHT11 sensor
#define RELAYPIN 21         ///< Pin for the relay

int temperature = 0;        ///< Variable for temperature reading from DHT11
int humidity = 0;           ///< Variable for humidity reading from DHT11
int ldr = 0;                ///< Variable for LDR reading
int luz = 0;                ///< Variable for luminosity calculation
float voltage = 0.0;        ///< Variable for voltage reading from PZEM004Tv30
float current = 0.0;        ///< Variable for current reading from PZEM004Tv30
float power = 0.0;          ///< Variable for power reading from PZEM004Tv30
float energy = 0.0;         ///< Variable for energy reading from PZEM004Tv30
float frequency = 0.0;      ///< Variable for frequency reading from PZEM004Tv30
float pf = 0.0;             ///< Variable for power factor reading from PZEM004Tv30

DHT11 dht11(DHTPIN);        ///< Object for the DHT11 sensor
PZEM004Tv30 pzem(Serial1, 16, 17); ///< Object for the PZEM004Tv30 power monitor

const char* ssid = "e=mc2";                         ///< Wi-Fi network SSID
const char* password = "1xperiencia";               ///< Wi-Fi network password
const char* mqtt_server = "192.168.232.16";          ///< MQTT broker IP address

WiFiClient espClient;                               ///< Client for Wi-Fi connection
PubSubClient client(espClient);                     ///< MQTT client

unsigned long currentMillis, previousMillis = 0;     ///< Timing variables
const long interval = 2000;                         ///< Interval for sending data via MQTT

/**
 * @brief Setup Wi-Fi connection.
 * 
 * Connects to the specified Wi-Fi network using provided credentials.
 */
void setup_wifi() {
  WiFi.begin(ssid, password);
  Serial.print("Connecting to WiFi...");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to WiFi");
}

/**
 * @brief MQTT callback function.
 * 
 * Handles incoming MQTT messages. Controls relay based on commands received.
 * 
 * @param topic MQTT topic the message was received on.
 * @param payload Message payload (binary data).
 * @param length Length of the payload.
 */
void callback(char* topic, byte* payload, unsigned int length) {
  char* message = (char*) malloc(length + 1); // Allocate memory for message
  if (message == NULL) {
    Serial.println("Error allocating memory for MQTT message");
    return;
  }
  strncpy(message, (char*)payload, length);
  message[length] = '\0';

  if (strcmp(topic, "home/relay/command") == 0) {
    if (strcmp(message, "ON") == 0) {
      digitalWrite(RELAYPIN, LOW);
      client.publish("home/relay/state", "ON");
      Serial.println("Relay turned on via MQTT");
    } else if (strcmp(message, "OFF") == 0) {
      digitalWrite(RELAYPIN, HIGH);
      client.publish("home/relay/state", "OFF");
      Serial.println("Relay turned off via MQTT");
    }
  }

  free(message); // Free dynamically allocated memory
}

/**
 * @brief Reconnect to MQTT broker if connection is lost.
 * 
 * Attempts to reconnect to the MQTT broker if not currently connected.
 * Subscribes to required MQTT topics upon successful connection.
 */
void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (client.connect("ESP32Client")) {
      Serial.println("connected");
      client.subscribe("home/sensor/leituras");
      client.subscribe("home/relay/command");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" trying again in 5 seconds");
      delay(5000);
    }
  }
}

/**
 * @brief Read temperature and humidity from DHT11 sensor.
 * 
 * Reads temperature and humidity from DHT11 sensor.
 * Publishes sensor readings via MQTT.
 */
void readDht() {
  int result = dht11.readTemperatureHumidity(temperature, humidity);
  if (result == 0) {
    char* temperatureMsg = (char*) malloc(50); // Allocate memory for message
    char* humidityMsg = (char*) malloc(50);    // Allocate memory for message
    if (temperatureMsg == NULL || humidityMsg == NULL) {
      Serial.println("Error allocating memory for DHT messages");
      if (temperatureMsg != NULL) free(temperatureMsg);
      if (humidityMsg != NULL) free(humidityMsg);
      return;
    }
    snprintf(temperatureMsg, 50, "Temperature: %dÂºC", temperature);
    snprintf(humidityMsg, 50, "Humidity: %d%%", humidity);
    Serial.println(temperatureMsg);
    Serial.println(humidityMsg);
    client.publish("home/sensor/dht/temperature", temperatureMsg);
    client.publish("home/sensor/dht/humidity", humidityMsg);
    free(temperatureMsg); // Free dynamically allocated memory
    free(humidityMsg);    // Free dynamically allocated memory
  } else {
    Serial.println("Error reading DHT sensor");
  }
}

/**
 * @brief Read luminosity from LDR sensor.
 * 
 * Reads luminosity from LDR sensor.
 * Publishes sensor reading via MQTT.
 */
void readLdr() {
  ldr = analogRead(LDRPIN);
  luz = 100 * (4096 - ldr) / 4096;
  char* ldrMsg = (char*) malloc(50); // Allocate memory for message
  if (ldrMsg == NULL) {
    Serial.println("Error allocating memory for LDR message");
    return;
  }
  snprintf(ldrMsg, 50, "Luminosity: %d%%", luz);
  Serial.println(ldrMsg);
  client.publish("home/sensor/ldr", ldrMsg);
  free(ldrMsg); // Free dynamically allocated memory
}

/**
 * @brief Read voltage, current, power, energy, frequency, and power factor from PZEM004Tv30 sensor.
 * 
 * Reads various electrical parameters from PZEM004Tv30 sensor.
 * Publishes sensor readings via MQTT.
 */
void readPzem() {
  voltage = pzem.voltage();
  current = pzem.current();
  power = pzem.power();
  energy = pzem.energy();
  frequency = pzem.frequency();
  pf = pzem.pf();

  char msg[50];
  if (!isnan(voltage)) {
    snprintf(msg, sizeof(msg), "Voltage: %.1f V", voltage);
    Serial.println(msg);
    client.publish("home/sensor/pzem/voltage", msg);
  } else {
    Serial.println("Error reading voltage");
  }
  if (!isnan(current)) {
    snprintf(msg, sizeof(msg), "Current: %.2f A", current);
    Serial.println(msg);
    client.publish("home/sensor/pzem/current", msg);
  } else {
    Serial.println("Error reading current");
  }
  if (!isnan(power)) {
    snprintf(msg, sizeof(msg), "Power: %.2f W", power);
    Serial.println(msg);
    client.publish("home/sensor/pzem/power", msg);
  } else {
    Serial.println("Error reading power");
  }
  if (!isnan(energy)) {
    snprintf(msg, sizeof(msg), "Energy: %.3f kWh", energy);
    Serial.println(msg);
    client.publish("home/sensor/pzem/energy", msg);
  } else {
    Serial.println("Error reading energy");
  }
  if (!isnan(frequency)) {
    snprintf(msg, sizeof(msg), "Frequency: %.1f Hz", frequency);
    Serial.println(msg);
    client.publish("home/sensor/pzem/frequency", msg);
  } else {
    Serial.println("Error reading frequency");
  }
  if (!isnan(pf)) {
    snprintf(msg, sizeof(msg), "Power Factor: %.2f", pf);
    Serial.println(msg);
    client.publish("home/sensor/pzem/pf", msg);
  } else {
    Serial.println("Error reading power factor");
  }
}

/**
 * @brief Arduino setup function.
 * 
 * Initializes serial communication, sensor pins, Wi-Fi connection,
 * MQTT client, and sets up MQTT callback.
 */
void setup() {
  Serial.begin(115200);
  analogReadResolution(12);
  pinMode(RELAYPIN, OUTPUT);
  digitalWrite(RELAYPIN, HIGH);

  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

/**
 * @brief Arduino main loop function.
 * 
 * Maintains Wi-Fi connection, MQTT connection, and periodically reads sensor data.
 * Processes incoming MQTT messages and controls relay based on serial input.
 */
void loop() {
  if (WiFi.status() != WL_CONNECTED) {
    setup_wifi();
  }

  if (!client.connected()) {
    reconnect();
  }
  
  client.loop(); // Maintain MQTT connection and process incoming messages

  currentMillis = millis();
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;

    readDht(); // Read and publish DHT11 sensor data
    readLdr(); // Read and publish LDR sensor data
    readPzem(); // Read and publish PZEM004Tv30 sensor data
  }

  if (Serial.available() > 0) {
    char c = Serial.read();
    if (c == 'a') {
      digitalWrite(RELAYPIN, LOW); // Turn relay on
      client.publish("home/relay/state", "ON");
      Serial.println("Relay turned on via Serial");
    } else if (c == 'd') {
      digitalWrite(RELAYPIN, HIGH); // Turn relay off
      client.publish("home/relay/state", "OFF");
      Serial.println("Relay turned off via Serial");
    }
  }
}